* SQL Table Commands for an Ice Cream Shop Schema


create table ingredient (
        ID		int,                                                
        name		varchar(20) not null,
        cost		numeric(5,2),
        expiration_date	date not null,
        in_stock		char(1),
        primary key (ID),
        check (ID > 0),
	check (cost > 0),
	check (in_stock in (‘T’, ‘F’, ‘U’));


* Note: since SQL doesn’t have boolean as a domain type, char(1) will either represent ‘T’ for true, ‘F’ for false, or ‘U’ for unknown.
* Assume we check/update stock once every week.


create table product (
        ID		int,                                                
        menu_name	varchar(20) not null,
        price		numeric(5,2),        
        primary key (ID),
	check (ID > 0),
	check (price > 0));


* Note: price may or may not be more than sum of the costs of the ingredients it contains, as it may be on sale for a special.


create table contains (
        product_ID	int,                                                
        ingredient_ID	varchar(20),
        quantity		int,        
	primary key (product_ID, ingredient_ID),
	foreign key (product_ID) references product,
	foreign key (ingredient_ID) references ingredient,
	check (quantity > 0));


* Note: to find a specific recipe, we can create a view that includes all of the ingredients along with their corresponding quantities that are relative to a specific product.
* Note: because we are simply dealing with ice cream scoops and sundaes, directions for how to make the product/menu-item/recipe are either taught or simple enough to understand from whatever ingredients are included.
* Note: the attribute, quantity, holds the value for how many servings of ingredient, ingredient_ID, are contained in this given product, product_ID.  Also, we would eventually let ingredients be taken from the inventory (entity), however, we will let the inventory entity be outside of the scope from this first draft of the business.


create table customer (
        ID		int,                                                
        first_name	varchar(15) not null,
        last_name	varchar(15) not null,
        email		varchar(20),
	primary key (ID),
	check (ID > 0));


create table transaction (
        ID		int,                                                
        type		varchar(20),
        date		timestamp not null,
        payment_status	varchar(20) not null,
        customer_ID	int,
        primary key (ID),
        foreign key (customer_ID) references customer, 
        check (ID > 0),
	check (type in (‘cash’, ‘credit’)),
	check (payment_status in (‘complete’, ‘incomplete’, or ‘pending’));


* Note: if the transaction is completed in cash, then it is not necessary to store data about the customer.  Thus, the value for the customer_ID attribute may be null here.


create table purchased (
        product_ID	int,                                                
        transaction_ID	int,
        quantity		int,
	primary key (product_ID, transaction_ID),
	foreign key (product_ID) references product,
	foreign key (transaction_ID) references transaction,
	check (quantity > 0));


* Note: the attribute, quantity, holds the value for how many products of product_ID that were purchased through the given transaction.


create table employee (
        ID		int,                                                
        first_name	varchar(15) not null,
        last_name	varchar(15) not null,
        email		varchar(20),
        wage		numeric(4,2),
        position		varchar(20),
	primary key (ID),
	check (ID > 0),
	check (wage > 14.99));


create table employee_phone (
        employee_ID	int,                                                
        phone_number	varchar(15),
	primary key (employee_ID, phone_number),
	foreign key (employee_ID) references employee);


create table shift (
        employee_ID	int,                                                
        date		date,
        hours		numeric(4,2),
	primary key (employee_ID, date),
	foreign key (employee_ID) references employee,
	check (hours > 0));


* Note: Assuming no split shifts, and there is only one employee per shift.
